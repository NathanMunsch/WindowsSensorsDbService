// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WindowsSensorsDbService.Data;

#nullable disable

namespace WindowsSensorsDbService.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240816162330_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WindowsSensorsDbService.Models.ComputerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComputerEntities");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.DateMeasurementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComputerEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComputerEntityId");

                    b.ToTable("DateMeasurementEntities");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.HardwareEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HardwareEntities");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.MeasurementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DateMeasurementEntityId")
                        .HasColumnType("int");

                    b.Property<int>("HardwareEntityId")
                        .HasColumnType("int");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateMeasurementEntityId");

                    b.HasIndex("HardwareEntityId");

                    b.ToTable("MeasurementEntities");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.DateMeasurementEntity", b =>
                {
                    b.HasOne("WindowsSensorsDbService.Models.ComputerEntity", "ComputerEntity")
                        .WithMany("DateMeasurementEntities")
                        .HasForeignKey("ComputerEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComputerEntity");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.MeasurementEntity", b =>
                {
                    b.HasOne("WindowsSensorsDbService.Models.DateMeasurementEntity", "DateMeasurementEntity")
                        .WithMany("MeasurementEntities")
                        .HasForeignKey("DateMeasurementEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WindowsSensorsDbService.Models.HardwareEntity", "HardwareEntity")
                        .WithMany("MeasurementEntities")
                        .HasForeignKey("HardwareEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DateMeasurementEntity");

                    b.Navigation("HardwareEntity");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.ComputerEntity", b =>
                {
                    b.Navigation("DateMeasurementEntities");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.DateMeasurementEntity", b =>
                {
                    b.Navigation("MeasurementEntities");
                });

            modelBuilder.Entity("WindowsSensorsDbService.Models.HardwareEntity", b =>
                {
                    b.Navigation("MeasurementEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
